# -*- coding: utf-8 -*-
"""PDSI - AS03

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGk1oYfbe83KEwJkR-xmGkuJEdioL6Uv

# Installation
"""

!pip install -q gradio
!pip install -q pyChatGPT
!pip install -q git+https://github.com/openai/whisper.git
!pip install -q --upgrade git+https://github.com/huggingface/diffusers.git transformers accelerate scipy
!pip install openai
!pip install gTTS

"""# Imports"""

from diffusers import StableDiffusionPipeline, EulerDiscreteScheduler
from pyChatGPT import ChatGPT
from gtts import gTTS
from PIL import Image

import librosa, librosa.display
import IPython.display as ipd
import gradio as gr 
import warnings
import whisper
import openai
import torch
import time
import os

"""# Defining Variables"""

warnings.filterwarnings("ignore")

model = whisper.load_model("base")

model.device

model_id = "stabilityai/stable-diffusion-2"
scheduler = EulerDiscreteScheduler.from_pretrained(model_id, subfolder="scheduler")

pipe = StableDiffusionPipeline.from_pretrained(model_id, scheduler=scheduler, revision="fp16", torch_dtype=torch.float16)
pipe = pipe.to("cuda")

"""# Transcribe Function"""

openai.api_key = "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"

!gdown 1mydHuxViGui056BTJvNM5an0gcf1WidQ

def transcribe(audio):
  # load audio and pad/trim it to fit 30 seconds
  audio = whisper.load_audio(audio)
  audio = whisper.pad_or_trim(audio)

  # make log-Mel spectrogram and move to the same device as the model
  mel = whisper.log_mel_spectrogram(audio).to(model.device)

  # decode the audio
  options = whisper.DecodingOptions(language = "pt")
  result = whisper.decode(model, mel, options)
  result_text = result.text
 
  # correct words
  bag = result_text.split()

  labels = ["imagem", "foto", "image"]
  words = ["gere", "mostre", "mande", "jere", "j√©ril "]

  if len(set(bag).intersection(labels)) != 0 and len(set(bag).intersection(labels)) != 0:
    for i in words:
      if i in result_text.lower():
        result_text = result_text.replace(i, 'descreva')
        
  # pass the generated text to Chatgpt
  response = openai.Completion.create(
  model="text-davinci-003",
  prompt=result_text,
  temperature=0.3,
  max_tokens=1000,
  top_p=1,
  frequency_penalty=0.0,
  presence_penalty=0.0,
  )

  out_result = response["choices"][0]["text"]

  # TTS
  text = out_result
  language = 'pt'
  out_audio = gTTS(text=text, lang=language, slow=False)
  out_audio.save("TTS.mp3")
  out_audio = '/content/TTS.mp3'

  # choice image or not
  bag = result_text.split()

  if len(set(bag).intersection(labels)) != 0:
    out_image = pipe(out_result, height=768, width=768).images[0]
  else:
    out_image = Image.open("/content/Manoel_Gomes.png")

  return[result_text, out_result, out_image, out_audio]

"""# Gradio Interface"""

output_1 = gr.Textbox(label="Speech to Text")
output_2 = gr.Textbox(label="ChatGPT Output")
output_3 = gr.Image(label="Diffusion Output")
output_4 = gr.Audio(label = "Text to Speech")

input_1 = gr.inputs.Audio(source="microphone", type="filepath")

gr.Interface(
    title = "Assistente GPT",     
    fn=transcribe, 
    inputs=[
        input_1
    ],
    outputs=[
        output_1,  output_2, output_3, output_4
    ],
    live=True).launch(share=True)